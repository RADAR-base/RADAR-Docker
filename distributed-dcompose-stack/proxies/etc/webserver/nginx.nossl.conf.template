worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  real_ip_header X-Forwarded-For;
  # Updated from NGINX_PROXIES .env variable by `bin/radar-docker install`.
  # Do not change the next line! It is autogenerated.
  # NGINX_PROXIES
  real_ip_recursive on;

  default_type application/octet-stream;
  log_format   main '$remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  tcp_nodelay  on;

  # add nosniff header (https://www.owasp.org/index.php/List_of_useful_HTTP_headers)
  add_header X-Content-Type-Options nosniff;

  # For logins, make 2 requests per second at most
  limit_req_zone $binary_remote_addr zone=login_limit:10m rate=2r/s;

  server {
    listen                    80 default_server;
    listen                    [::]:80 default_server;
    server_name               localhost;

    access_log                /var/log/nginx/access.log;
    error_log                 /var/log/nginx/error.log;

    location /kafka/ {
      include cors.conf;
      proxy_pass         http://gateway/radar-gateway/;
      proxy_set_header   Host $host;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location ^~ /kafka/consumers {
      deny all;
    }
    location ^~ /kafka/brokers {
      deny all;
    }
    location ~* /kafka/topics/.+/partitions {
      deny all;
    }
    location /schema/ {
      if ($request_method = 'OPTIONS') {
        # Tell client that this pre-flight info is valid for 20 days
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
      }

      limit_except GET OPTIONS {
        deny all;
      }
      proxy_pass         http://schema-registry-1:8081/;
      proxy_set_header   Host $host;
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location /portainer/ {
      include ip-access-control.conf;

      proxy_pass         ${PORTAINER_URL};
      proxy_http_version 1.1;
      proxy_set_header   Connection "";
    }
    location /portainer/api/websocket/ {
      include ip-access-control.conf;
      proxy_pass         ${PORTAINER_URL}api/websocket/;
      proxy_set_header   Upgrade $http_upgrade;
      proxy_set_header   Connection "upgrade";
      proxy_http_version 1.1;
    }
    location /managementportal/ {
      include cors.conf;
      proxy_pass         ${MANAGEMENT_PORTAL_URL}managementportal/;
      proxy_set_header   Host $host;
    }
    location /managementportal/oauth/ {
      # Allow 20 fast-following requests, like when authorizing a user.
      limit_req zone=login_limit burst=20;
      include cors.conf;
      proxy_pass         ${MANAGEMENT_PORTAL_URL}managementportal/oauth/;
      proxy_set_header   Host $host;
    }
    location /managementportal/api/meta-token/ {
      limit_req zone=login_limit;
      include cors.conf;
      proxy_pass         ${MANAGEMENT_PORTAL_URL}managementportal/api/meta-token/;
      proxy_set_header   Host $host;
    }

    location /kafkamanager/{
      include ip-access-control.conf;
      auth_basic         "Kafka manager";
      auth_basic_user_file kafka-manager.htpasswd;

      proxy_pass         ${KAFKA_MANAGER_URL};
      proxy_set_header   Host $host;
    }
    location /redcapint/ {
      proxy_pass         ${REDCAP_INTEGRATION_APP_URL};
      proxy_set_header   Host $host;
    }

    location /rest-sources/authorizer/ {
      include ip-access-control.conf;
      auth_basic         "Rest Source Authorizer";
      auth_basic_user_file rest-source-authorizer.htpasswd;

      proxy_pass         ${RADAR_REST_SOURCES_URL};
      proxy_set_header   Host $host;
    }

    location /rest-sources/backend/ {
      proxy_pass         ${RADAR_REST_SOURCES_BACKEND_URL};
      proxy_set_header   Host $host;
    }

    location /catalog-server/ {
      proxy_pass         http://catalog-server:9010/;
      proxy_set_header   Host $host;
    }

    location /appserver-alpha/ {
      proxy_pass         http://${APPSERVER_ALPHA_URL}/;
      proxy_set_header   Host $host;
    }

    location /appserver/ {
      proxy_pass         http://${APPSERVER_URL}/;
      proxy_set_header   Host $host;
    }

    location /push-endpoint/ {
      proxy_pass         http://${PUSH_ENDPOINT_URL}/;
      proxy_set_header   Host $host;
    }

    location /netdata/ {
      proxy_pass         http://${NETDATA_MASTER_HOST}/;
      proxy_set_header   Host $host;

      auth_basic         "Netdata";
      auth_basic_user_file netdata.htpasswd;
    }


    location /mlflow/ {
      proxy_pass         http://${MLFLOW_URL}/;
      proxy_set_header   Host $host;

      auth_basic         "ML Flow";
      auth_basic_user_file mlflow.htpasswd;
    }

    location /grafana/ {
      proxy_pass         http://${GRAFANA_DASHBOARD_URL}/;
      proxy_set_header   Host $host;
    }


    location /hdfsnamenode/ {
      proxy_pass         ${HDFS_NAMENODE_UI_URL};
      proxy_set_header   Host $host;
      proxy_set_header Accept-Encoding "";

      auth_basic         "HDFS Namnode UI";
      auth_basic_user_file hdfs-namenode.htpasswd;

      sub_filter 'src="/' 'src="/hdfsnamenode/';
      sub_filter 'src="' 'src="/hdfsnamenode/';
      sub_filter 'href="/' 'href="/hdfsnamenode/';
      sub_filter 'href=\'/' 'href=\'/hdfsnamenode/';
      sub_filter "/jmx" "/hdfsnamenode/jmx";
      sub_filter "/conf" "/hdfsnamenode/conf";
      sub_filter "/startupProgress" "/hdfsnamenode/startupProgress";
      sub_filter_once off;
      sub_filter_types *;
    }
    location /stub_status {
      stub_status;
      # Security: Only allow access from the IP below.
      allow ${NETDATA_MASTER_HOST_IP};
      # Deny anyone else
      deny all;
   }
  }
}
